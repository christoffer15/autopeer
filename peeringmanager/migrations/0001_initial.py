# Generated by Django 4.2.7 on 2023-11-13 16:55

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Router",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("location", models.CharField(max_length=100, verbose_name="Location")),
                (
                    "host_external",
                    models.CharField(max_length=100, verbose_name="External host"),
                ),
                (
                    "host_internal",
                    models.CharField(max_length=100, verbose_name="Internal host"),
                ),
                (
                    "ip_internal",
                    models.CharField(max_length=100, verbose_name="Internal IP"),
                ),
                (
                    "flag_emoji",
                    models.CharField(
                        default="ðŸ‡ªðŸ‡º", max_length=10, verbose_name="Location flag emoji"
                    ),
                ),
                (
                    "wg_last_port",
                    models.IntegerField(
                        default=42400, verbose_name="Last allocated wireguard port"
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        default=True,
                        help_text="Users can only create peerings to active routers",
                        verbose_name="Active",
                    ),
                ),
            ],
            options={
                "ordering": ["location"],
            },
        ),
        migrations.CreateModel(
            name="Peering",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "mntner",
                    models.CharField(max_length=200, verbose_name="Maintainer object"),
                ),
                (
                    "asn",
                    models.BigIntegerField(
                        help_text="Your maintainer object must be listed as mnt-by for the AS",
                        verbose_name="AS Number",
                    ),
                ),
                (
                    "vpn_type",
                    models.CharField(
                        choices=[("wireguard", "Wireguard")],
                        default="wireguard",
                        help_text="Peering is also possible using OpenVPN/GRE/â€¦, but only with manual setup for now.",
                        max_length=50,
                        verbose_name="VPN type",
                    ),
                ),
                (
                    "endpoint",
                    models.CharField(
                        help_text="Hostname/IP and port, e.g. example.org:1234, 127.0.0.1:1234, [::1]:1234",
                        max_length=200,
                        verbose_name="Wireguard endpoint",
                    ),
                ),
                (
                    "endpoint_internal_v4",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="Internal DN42 address of your router",
                        null=True,
                        protocol="IPv4",
                        verbose_name="Internal IPv4 address",
                    ),
                ),
                (
                    "endpoint_internal_v6",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="Link-local IPv6 address of your router",
                        null=True,
                        protocol="IPv6",
                        verbose_name="Link-local IPv6 address",
                    ),
                ),
                (
                    "router_endpoint_internal_v6",
                    models.GenericIPAddressField(
                        blank=True,
                        default="fe80::acab",
                        help_text="Link-local IPv6 address of my router",
                        null=True,
                        protocol="IPv6",
                        verbose_name="Link-local IPv6 address router",
                    ),
                ),
                (
                    "mbgp_enabled",
                    models.BooleanField(
                        default=True,
                        help_text="If set, the router will establish a Multi-protocol session for both IPv4 and IPv6 over the IPv6 link-local address (RFC 4760)",
                        verbose_name="Multi-protocol BGP over IPv6",
                    ),
                ),
                (
                    "bandwidth_community",
                    models.IntegerField(
                        choices=[
                            (21, "â‰¥0.1mbit"),
                            (22, "â‰¥1mbit"),
                            (23, "â‰¥10mbit"),
                            (24, "â‰¥100mbit"),
                            (25, "â‰¥1gbit"),
                        ],
                        default=24,
                        help_text='Used to set <a href="https://dn42.eu/howto/Bird-communities">BGP communities</a>',
                        verbose_name="Link bandwidth",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text='A human-readable name for this peering. Usually your nickname or a network name. Used for the Wireguard interface name, in the looking glass, and similar places. Lowercase ASCII only, max. 12 chars, needs to start with a non-number. <br><br><strong>The point of this name is to make it easier to identify peerings in command outputs for _me_ , so please don\'t use generic names like "home", "router" or "lutomanyc".</strong>',
                        max_length=12,
                        verbose_name="Peering name",
                    ),
                ),
                (
                    "wg_privkey",
                    models.CharField(
                        max_length=150, verbose_name="Wireguard private key"
                    ),
                ),
                (
                    "wg_pubkey",
                    models.CharField(
                        max_length=150, verbose_name="Wireguard public key"
                    ),
                ),
                (
                    "wg_peer_pubkey",
                    models.CharField(
                        help_text="See <a href='https://www.wireguard.com/quickstart/#key-generation'>Wireguard manual</a> on how to generate the keys",
                        max_length=150,
                        verbose_name="Wireguard public key",
                    ),
                ),
                ("wg_port", models.IntegerField(verbose_name="Wireguard port")),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Owner",
                    ),
                ),
                (
                    "router",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="peeringmanager.router",
                        verbose_name="Router",
                    ),
                ),
            ],
            options={
                "verbose_name": "Peering",
                "verbose_name_plural": "Peerings",
                "unique_together": {
                    ("router", "name"),
                    ("router", "endpoint_internal_v4"),
                    ("router", "wg_port"),
                    ("router", "asn"),
                },
            },
        ),
    ]
